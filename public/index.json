
[{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/categories/automation/","section":"Categories","summary":"","title":"Automation","type":"categories"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/tags/automation/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Automation","type":"tags"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/categories/azure-identity/","section":"Categories","summary":"","title":"Azure Identity","type":"categories"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" If it\u0026rsquo;s not in Entra, it doesn\u0026rsquo;t exist—to your policies, dynamic groups, or audit logs. Missing user metadata like department, title, or usageLocation\rcan silently break downstream automations and cause inconsistencies that are hard to debug.\nThis post walks through how to audit Entra ID user profiles\rusing PowerShell and Microsoft Graph,\rflagging any accounts with incomplete or empty property fields.\nPrerequisites\rPrerequisites\rPowerShell 7+ Microsoft Graph PowerShell SDK Admin permissions to Microsoft Entra ID Install-Module Microsoft.Graph -Scope CurrentUser Connect-MgGraph -Scopes \u0026#34;User.Read.All\u0026#34;, \u0026#34;Directory.Read.All\u0026#34; Note: You only need read access for this operation, not User.Write.All.\r800 list clipboard svgrepo com\rProperties We\u0026#39;re Auditing\rWe’ll be checking each user for the following missing or blank fields:\ndepartment\rjobTitle\rusageLocation\rmanager\rmobilePhone\r, officeLocation\r(both optional) You can customize this based on your environment.\n48 powershell svgrepo com\rPowershell Script\r$propertiesToCheck = @(\u0026#34;Department\u0026#34;, \u0026#34;JobTitle\u0026#34;, \u0026#34;UsageLocation\u0026#34;, \u0026#34;Manager\u0026#34;, \u0026#34;MobilePhone\u0026#34;, \u0026#34;OfficeLocation\u0026#34;) $results = @() $users = Get-MgUser -All -Property \u0026#34;Id,DisplayName,UserPrincipalName,Department,JobTitle,UsageLocation,Manager,MobilePhone,OfficeLocation\u0026#34; foreach ($user in $users) { $missingProps = @() foreach ($prop in $propertiesToCheck) { if (-not $user.$prop) { $missingProps += $prop } } if ($missingProps.Count -gt 0) { $results += [PSCustomObject]@{ DisplayName = $user.DisplayName UserPrincipalName = $user.UserPrincipalName MissingProperties = ($missingProps -join \u0026#34;, \u0026#34;) } } } $results | Format-Table -AutoSize 48 scroll\rThe Results\rPS C:\\Users\\logphile\u0026gt; New-SmartUser $propertiesToCheck = @(\u0026#34;Department\u0026#34;, \u0026#34;JobTitle\u0026#34;, \u0026#34;UsageLocation\u0026#34;, \u0026#34;Manager\u0026#34;, \u0026#34;MobilePhone\u0026#34;, \u0026#34;OfficeLocation\u0026#34;) \u0026gt;\u0026gt; $results = @() \u0026gt;\u0026gt; $users = Get-MgUser -All -Property \u0026#34;Id,DisplayName,UserPrincipalName,Department,JobTitle,UsageLocation,Manager,MobilePhone,OfficeLocation\u0026#34; \u0026gt;\u0026gt; foreach ($user in $users) { \u0026gt;\u0026gt; $missingProps = @() \u0026gt;\u0026gt; foreach ($prop in $propertiesToCheck) { \u0026gt;\u0026gt; if (-not $user.$prop) { \u0026gt;\u0026gt; $missingProps += $prop \u0026gt;\u0026gt; } \u0026gt;\u0026gt; } \u0026gt;\u0026gt; if ($missingProps.Count -gt 0) { \u0026gt;\u0026gt; $results += [PSCustomObject]@{ \u0026gt;\u0026gt; DisplayName = $user.DisplayName \u0026gt;\u0026gt; UserPrincipalName = $user.UserPrincipalName \u0026gt;\u0026gt; MissingProperties = ($missingProps -join \u0026#34;, \u0026#34;) \u0026gt;\u0026gt; } \u0026gt;\u0026gt; } \u0026gt;\u0026gt; } \u0026gt;\u0026gt; $results | Format-Table -AutoSize DisplayName UserPrincipalName Missing Properties ----------- ----------------- ------------------ Warren Worthington angel@logphile.com UsageLocation Hank McCoy beast@logphile.com UsageLocation Piotr Nikolayevich Rasputin colossus@logphile.com UsageLocation Scott Summers cyclops@logphile.com UsageLocation Bobby Drake iceman@logphile.com UsageLocation Jean Grey marvelgirl@logphile.com UsageLocation Kurt Wagner nightcrawler@logphile.com OfficeLocation Phil Boyce phil@logphile.com Department, JobTitle, MobilePhone, OfficeLocation Charles Xavier profx@logphile.com UsageLocation James Howlett wolverine@logphile.com UsageLocation 48 rocket launch\rExporting to CSV (Optional)\r$results | Export-Csv -Path \u0026#34;EntraUserAudit.csv\u0026#34; -NoTypeInformation 48 brain svgrepo com\rWhy This Matters\rBroken dynamic group rules License assignment failures Inaccurate compliance or org charts Missed automation triggers Directory drift happens quietly. This gives you visibility and control.\n48 odysee\rIdeas to Extend This\rAuto-tag users with profileStatus = incomplete\rSend Teams alerts or email summaries Schedule via Azure Automation or GitHub Actions 64 logphile paperclip\rReferences\rMicrosoft Graph PowerShell SDK Docs User Resource Type - Microsoft Graph Graph Query Parameters Reference After several years as a stay-at-home dad, I\u0026rsquo;m working my way back into the tech field—brushing up on tools, learning what’s changed, and sharing the journey along the way. This blog is part learning tool, part signal to employers, and part proof of work. Thanks for reading!\r","date":"March 28, 2025","externalUrl":null,"permalink":"/blog/directory-drift/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"Missing user metadata can break your policies, groups, and reports. Learn how to audit Entra ID user profiles using PowerShell and Microsoft Graph.","title":"Directory Drift: Auditing Incomplete Entra User Profiles with PowerShell + Graph","type":"blog"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/tags/entra-id/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Entra Id","type":"tags"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"logPhile@blog:~$ | The Logs Know What Broke First","type":"page"},{"content":"\rRecent Posts\r","date":"March 28, 2025","externalUrl":null,"permalink":"/blog/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"\u003csection class=\"mt-0 flex flex-col max-w-full dark:prose-invert\"\u003e\r\n  \u003chr class=\"mt-5 border-t border-secondary-500 w-full mb-3 thicc\"\u003e\r\n  \u003ch1 class=\"text-4xl font-extrabold text-neutral-900 dark:text-neutral mb-3 !mb-3\"\u003eRecent Posts\u003c/h1\u003e\r\n  \u003chr class=\"mt-3 border-t border-secondary-500 w-full mb-5 thicc\"\u003e\r\n\u003c/section\u003e","title":"logPhile@blog:~$ | The Logs Know What Broke First","type":"blog"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/tags/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"logPhile@blog:~$ | The Logs Know What Broke First","type":"tags"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/tags/microsoft-graph/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Microsoft Graph","type":"tags"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/tags/powershell/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Powershell","type":"tags"},{"content":"","date":"March 28, 2025","externalUrl":null,"permalink":"/tags/user-audit/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"User Audit","type":"tags"},{"content":"","date":"March 24, 2025","externalUrl":null,"permalink":"/tags/customization/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Customization","type":"tags"},{"content":"","date":"March 24, 2025","externalUrl":null,"permalink":"/tags/terminal/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Terminal","type":"tags"},{"content":"","date":"March 24, 2025","externalUrl":null,"permalink":"/tags/themes/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Themes","type":"tags"},{"content":"","date":"March 24, 2025","externalUrl":null,"permalink":"/categories/tools/","section":"Categories","summary":"","title":"Tools","type":"categories"},{"content":"","date":"March 24, 2025","externalUrl":null,"permalink":"/tags/windows/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Windows","type":"tags"},{"content":"","date":"March 24, 2025","externalUrl":null,"permalink":"/categories/workflow/","section":"Categories","summary":"","title":"Workflow","type":"categories"},{"content":"","date":"March 24, 2025","externalUrl":null,"permalink":"/tags/x-men/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"X-Men","type":"tags"},{"content":" After reformatting my machine recently, I took the opportunity to rebuild my terminal environment from scratch. One of the first customizations? Knock the color out so there\u0026rsquo;s something to look at while you keep customizing.\nIf you\u0026rsquo;re like me, you\u0026rsquo;re old. Since you\u0026rsquo;re reading this post, you\u0026rsquo;re probably a nerd too. Who can forget that blue, yellow, and white color palette that dominated the 90s comics during Jim Lee’s iconic run. It was the perfect balance of bold, clean, and readable. Hopefully this Windows Terminal color scheme across the same way.\n48 brain svgrepo com\rCustomizing Windows Terminal with X-Men Colors\rHere’s a snapshot of the terminal with the theme applied:\nPreview of Windows Terminal using X-Men colors.\rAnd here’s the color scheme you can drop into your settings.json:\n{ \u0026#34;name\u0026#34;: \u0026#34;X-Men\u0026#34;, \u0026#34;background\u0026#34;: \u0026#34;#0D1117\u0026#34;, \u0026#34;foreground\u0026#34;: \u0026#34;#F8F8F2\u0026#34;, \u0026#34;cursorColor\u0026#34;: \u0026#34;#FFD700\u0026#34;, \u0026#34;selectionBackground\u0026#34;: \u0026#34;#1A1F29\u0026#34;, \u0026#34;black\u0026#34;: \u0026#34;#0D1117\u0026#34;, \u0026#34;red\u0026#34;: \u0026#34;#FFD54F\u0026#34;, \u0026#34;green\u0026#34;: \u0026#34;#FFEA00\u0026#34;, \u0026#34;yellow\u0026#34;: \u0026#34;#FFF176\u0026#34;, \u0026#34;blue\u0026#34;: \u0026#34;#2196F3\u0026#34;, \u0026#34;purple\u0026#34;: \u0026#34;#42A5F5\u0026#34;, \u0026#34;cyan\u0026#34;: \u0026#34;#90CAF9\u0026#34;, \u0026#34;white\u0026#34;: \u0026#34;#F8F8F2\u0026#34;, \u0026#34;brightBlack\u0026#34;: \u0026#34;#20232A\u0026#34;, \u0026#34;brightRed\u0026#34;: \u0026#34;#FFE082\u0026#34;, \u0026#34;brightGreen\u0026#34;: \u0026#34;#FFF59D\u0026#34;, \u0026#34;brightYellow\u0026#34;: \u0026#34;#FFEB3B\u0026#34;, \u0026#34;brightBlue\u0026#34;: \u0026#34;#64B5F6\u0026#34;, \u0026#34;brightPurple\u0026#34;: \u0026#34;#90CAF9\u0026#34;, \u0026#34;brightCyan\u0026#34;: \u0026#34;#BBDEFB\u0026#34;, \u0026#34;brightWhite\u0026#34;: \u0026#34;#FFFFFF\u0026#34; } Colors used in this theme: If you\u0026rsquo;re new to Windows Terminal and asking where the settings.json file is\u0026hellip;\rOpen Windows Terminal\rHit Ctrl\r+ ,\rClick Open JSON\rfile in the bottom left. Just make sure to set your terminal profile to use \u0026ldquo;colorScheme\u0026rdquo;: \u0026ldquo;X-Men\u0026rdquo;!\r$propertiesToCheck = @(\u0026#34;Department\u0026#34;, \u0026#34;JobTitle\u0026#34;, \u0026#34;UsageLocation\u0026#34;, \u0026#34;Manager\u0026#34;, \u0026#34;MobilePhone\u0026#34;, \u0026#34;OfficeLocation\u0026#34;) $results = @() $users = Get-MgUser -All -Property \u0026#34;Id,DisplayName,UserPrincipalName,Department,JobTitle,UsageLocation,Manager,MobilePhone,OfficeLocation\u0026#34; foreach ($user in $users) { $missingProps = @() foreach ($prop in $propertiesToCheck) { if (-not $user.$prop) { $missingProps += $prop } } if ($missingProps.Count -gt 0) { $results += [PSCustomObject]@{ DisplayName = $user.DisplayName UserPrincipalName = $user.UserPrincipalName MissingProperties = ($missingProps -join \u0026#34;, \u0026#34;) } } } 48 flask conical\rWhy Customize?\rIf you spend hours a day in the terminal, it should be a place that feels good to be in—like Storm’s hot tub, sipping wine—not a 1v1 with Wolverine in the Danger Room. Changes that make life easier on your eyes and help create a more focused, personalized workspace add up—and should absolutely be taken advantage of.\nGo down the customization rabbit hole:\nNerd Fonts Starship Cross-Shell Prompt Oh My Posh Powerline Fonts Oh My Zsh 48 treasure chest\rBonus\rI highly recommend Windows Terminal Themes to explore more themes. It’s a simple site that lets you browse and copy themes with a click — super useful when hunting for new ideas.\nAfter several years as a stay-at-home dad, I\u0026rsquo;m working my way back into the tech field—brushing up on tools, learning what’s changed, and sharing the journey along the way. This blog is part learning tool, part signal to employers, and part proof of work. Thanks for reading!\r","date":"March 24, 2025","externalUrl":null,"permalink":"/blog/windows-terminal-xmen-colors/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"Channel Jim Lee’s 90s X-Men in your Windows Terminal without the comic book store smell. A simple tweak that makes terminal life a little less painful.","title":"X-Men Colors in the Windows Terminal","type":"blog"},{"content":" What if your org chart wasn’t buried in HR PDFs but lived where access decisions are made?\nMicrosoft Entra ID\rsupports a manager\rproperty on each user object, which can be used to simulate an organizational chart—if populated correctly.\nIn this post, we’ll use PowerShell\rand Microsoft Graph\rto recursively build an org chart based on manager\rrelationships, then optionally export it to JSON\ror Graphviz DOT\rformat for visualization.\n800 logphile diploma\rWhat You\u0026#39;ll Learn\rHow to query user-manager relationships with Microsoft Graph How to recursively walk Entra ID\u0026rsquo;s hierarchy using PowerShell Where org chart data tends to break in the real world How to output to structured formats like JSON and DOT 48 flask conical\rPrerequisites\rInstall-Module Microsoft.Graph -Scope CurrentUser -Force Connect-MgGraph -Scopes \u0026#34;User.Read.All\u0026#34;, \u0026#34;Directory.Read.All\u0026#34; 800 logphile key\rKey Graph Properties\rWe’ll need:\nId\rDisplayName\rUserPrincipalName\rDepartment\rManager\r64 logphile looop\rRecursive Org Chart Builder (Powershell)\rfunction Get-OrgNode { param ( [string]$UserId, [int]$Depth = 0 ) $user = Get-MgUser -UserId $UserId -Property \u0026#34;Id,DisplayName,UserPrincipalName,Department\u0026#34; -ErrorAction SilentlyContinue if (-not $user) { return } $indent = \u0026#34; \u0026#34; * ($Depth * 4) Write-Host \u0026#34;$indent├── $($user.DisplayName) [$($user.Department)]\u0026#34; -ForegroundColor Cyan $directReports = Get-MgUserDirectReport -UserId $UserId -ErrorAction SilentlyContinue foreach ($report in $directReports) { Get-OrgNode -UserId $report.Id -Depth ($Depth + 1) } } # Replace with the ID of your top-level manager (e.g., CEO or head of department) $rootUser = Get-MgUser -Filter \u0026#34;displayName eq \u0026#39;Charles Xavier\u0026#39;\u0026#34; Get-OrgNode -UserId $rootUser.Id 48 treasure chest\rThe Result\rPS C:\\Users\\logphile\u0026gt;function Get-OrgNode { param ( [string]$UserId, [int]$Depth = 0 ) $user = Get-MgUser -UserId $UserId -Property \u0026#34;Id,DisplayName,UserPrincipalName,Department\u0026#34; -ErrorAction SilentlyContinue if (-not $user) { return } $indent = \u0026#34; \u0026#34; * ($Depth * 4) Write-Host \u0026#34;$indent├── $($user.DisplayName) [$($user.Department)]\u0026#34; -ForegroundColor Cyan $directReports = Get-MgUserDirectReport -UserId $UserId -ErrorAction SilentlyContinue foreach ($report in $directReports) { Get-OrgNode -UserId $report.Id -Depth ($Depth + 1) } } # Replace with the ID of your top-level manager (e.g., CEO or head of department) $rootUser = Get-MgUser -Filter \u0026#34;displayName eq \u0026#39;Charles Xavier\u0026#39;\u0026#34; Get-OrgNode -UserId $rootUser.Id ├── Charles Xavier [Leadership] ├── Ororo Munroe [Mutant Affairs] ├── Scott Summers [Field Operations] ├── Hisako Ichiki [Field Operations] ├── Warren Worthington [Finance] ├── Bobby Drake [Field Operations] ├── James Howlett [Security] ├── Laura Kinney [Security] ├── Piotr Nikolayevich Rasputin [Field Operations] ├── Kurt Wagner [Teleportation Ops] ├── Megan Gwynn [Teleportation Ops] ├── Clarice Ferguson [Teleportation Ops] ├── Hank McCoy [Science Division] ├── Forge [Science Division] ├── Tessa [Information Technology] PS C:\\Users\\logphile\u0026gt; 48 treasure chest\rExport to JSON (Optional)\rfunction Build-OrgTreeJson { param ([string]$UserId) $user = Get-MgUser -UserId $UserId -Property \u0026#34;Id,DisplayName,UserPrincipalName,Department\u0026#34; $directReports = Get-MgUserDirectReport -UserId $UserId $children = foreach ($report in $directReports) { Build-OrgTreeJson -UserId $report.Id } return [PSCustomObject]@{ Name = $user.DisplayName UPN = $user.UserPrincipalName Department = $user.Department Reports = $children } } # Get the root node (replace with your actual root if needed) $rootUser = Get-MgUser -Filter \u0026#34;displayName eq \u0026#39;Charles Xavier\u0026#39;\u0026#34; # Build the tree $tree = Build-OrgTreeJson -UserId $rootUser.Id # Export to JSON $tree | ConvertTo-Json -Depth 10 | Out-File \u0026#34;.\\\\orgTree.json\u0026#34; -Encoding utf8 { \u0026#34;Name\u0026#34;: \u0026#34;Charles Xavier\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;profx@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Leadership\u0026#34;, \u0026#34;Reports\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Ororo Munroe\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;storm@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Mutant Affairs\u0026#34;, \u0026#34;Reports\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Scott Summers\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;cyclops@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Field Operations\u0026#34;, \u0026#34;Reports\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;Hisako Ichiki\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;armor@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Field Operations\u0026#34;, \u0026#34;Reports\u0026#34;: null } }, { \u0026#34;Name\u0026#34;: \u0026#34;Warren Worthington\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;angel@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Finance\u0026#34;, \u0026#34;Reports\u0026#34;: null }, { \u0026#34;Name\u0026#34;: \u0026#34;Bobby Drake\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;iceman@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Field Operations\u0026#34;, \u0026#34;Reports\u0026#34;: null }, { \u0026#34;Name\u0026#34;: \u0026#34;James Howlett\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;wolverine@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Security\u0026#34;, \u0026#34;Reports\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;Laura Kinney\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;x23@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Security\u0026#34;, \u0026#34;Reports\u0026#34;: null } }, { \u0026#34;Name\u0026#34;: \u0026#34;Piotr Nikolayevich Rasputin\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;colossus@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Field Operations\u0026#34;, \u0026#34;Reports\u0026#34;: null }, { \u0026#34;Name\u0026#34;: \u0026#34;Kurt Wagner\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;nightcrawler@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Teleportation Ops\u0026#34;, \u0026#34;Reports\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;Megan Gwynn\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;pixie@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Teleportation Ops\u0026#34;, \u0026#34;Reports\u0026#34;: null }, { \u0026#34;Name\u0026#34;: \u0026#34;Clarice Ferguson\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;blink@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Teleportation Ops\u0026#34;, \u0026#34;Reports\u0026#34;: null } ] } ] }, { \u0026#34;Name\u0026#34;: \u0026#34;Hank McCoy\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;beast@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Science Division\u0026#34;, \u0026#34;Reports\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;Forge\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;forge@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Science Division\u0026#34;, \u0026#34;Reports\u0026#34;: null } }, { \u0026#34;Name\u0026#34;: \u0026#34;Tessa\u0026#34;, \u0026#34;UPN\u0026#34;: \u0026#34;sage@logphile.com\u0026#34;, \u0026#34;Department\u0026#34;: \u0026#34;Information Technology\u0026#34;, \u0026#34;Reports\u0026#34;: null } ] } 48 break svgrepo com\rWhere This Breaks\rMissing manager\rfield = orphaned node Cycles (rare but possible in messy directories) Manager points to deactivated or deleted accounts Top-level user has no manager\r= must start with known name 48 treasure chest\rBonus: Graphviz DOT Export\rfunction Export-ToDot { param ([object]$Node) $lines = @() foreach ($report in $Node.Reports) { $lines += \u0026#34;`\u0026#34;{0}`\u0026#34; -\u0026gt; `\u0026#34;{1}`\u0026#34;\u0026#34; -f $Node.Name, $report.Name $lines += Export-ToDot -Node $report } return $lines } $dot = @( \u0026#34;digraph OrgChart {\u0026#34;, \u0026#34; node [shape=box style=filled color=\\\u0026#34;#E3F2FD\\\u0026#34; fontname=\\\u0026#34;Segoe UI\\\u0026#34; fontsize=10];\u0026#34;, \u0026#34; edge [arrowhead=vee color=\\\u0026#34;#90CAF9\\\u0026#34;];\u0026#34; ) $dot += Export-ToDot -Node $tree $dot += \u0026#34;}\u0026#34; $dot -join \u0026#34;`n\u0026#34; | Out-File \u0026#34;.\\\\orgchart.dot\u0026#34; Run New orgchart.dot Through GraphViz #\rC:\\Users\\logphile\u0026gt;dot -Tpng orgchart.dot -o orgchart.png 48 scroll\rThe Results\rGraphViz can display data in a lot of cool ways. We can add color and more data.\nWant your org chart to update itself? Use this with Azure Automation or GitHub Actions and post the output to Teams or SharePoint. Clean. Reusable. Always current.\n64 logphile paperclip\rReferences\rMicrosoft Graph manager relationship Graphviz Online Renderer Get-MgUserDirectReport Docs After several years as a stay-at-home dad, I\u0026rsquo;m working my way back into the tech field—brushing up on tools, learning what’s changed, and sharing the journey along the way. This blog is part learning tool, part signal to employers, and part proof of work. Thanks for reading!\r","date":"March 23, 2025","externalUrl":null,"permalink":"/blog/faking-org-chart/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"What if your org chart wasn’t buried in HR PDFs but lived where access decisions are made? Use Microsoft Graph to recursively trace Entra ID hierarchies.","title":"Faking an Org Chart in Entra: Mapping Hierarchies with PowerShell + Graph","type":"blog"},{"content":"","date":"March 23, 2025","externalUrl":null,"permalink":"/tags/org-chart/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Org Chart","type":"tags"},{"content":"","date":"March 22, 2025","externalUrl":null,"permalink":"/tags/az-module/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Az Module","type":"tags"},{"content":" “Why do I need two different PowerShell modules just to manage Azure?”\nThat’s the common frustration—Az and Microsoft.Graph are both official modules, but they serve completely different purposes. This post breaks down when to use each, with examples, a comparison matrix, and tips for choosing the right one.\n48 flask conical\rWhat\u0026#39;s the Difference?\rAz is for managing Azure resources—think subscriptions, VMs, networking, storage. Microsoft.Graph is for managing Microsoft Entra ID (Azure AD) and Microsoft 365 identities—users, groups, licenses, directory roles. They\u0026rsquo;re both used in the Azure ecosystem, but they hit different APIs and serve different layers.\n512 cil balance scale\rComparison Matrix\rFeature / Action Az Module Microsoft.Graph Module Use This When… Create/Manage VMs, Storage, etc. ✅ Az.Compute, etc. ❌ You’re managing Azure infrastructure. Create/Update Users \u0026amp; Groups in Entra ID ❌ ✅ Microsoft.Graph.Users You’re managing Entra identity objects. Assign RBAC Roles to Azure resources ✅ ✅ (via role assignments) Either works, but Az is more common. Create/Manage Subscriptions \u0026amp; Resource Groups ✅ Az.Resources ❌ Managing the Azure structure itself. Assign Microsoft 365 licenses ❌ ✅ Microsoft.Graph.Licenses Working with SaaS identity entitlements. Use Azure Policy / ARM Templates ✅ ❌ Infrastructure governance and templates. Modify Conditional Access / Entra Policies ❌ ✅ Identity security config. Read/Write Entra Group Memberships ❌ ✅ Directory group automation. Automate Identity Lifecycle (HR sync, etc.) ❌ ✅ Microsoft Graph is the only option. 48 flask conical\rSyntax Side-by-Side\rCreate Resource Group (Az) #\rConnect-AzAccount New-AzResourceGroup -Name \u0026#34;dev-rg\u0026#34; -Location \u0026#34;eastus\u0026#34; Create Entra User (Graph) #\rConnect-MgGraph -Scopes \u0026#34;User.ReadWrite.All\u0026#34; New-MgUser -DisplayName \u0026#34;Logphile Test\u0026#34; -UserPrincipalName \u0026#34;logtest@domain.com\u0026#34; -MailNickname \u0026#34;logtest\u0026#34; -AccountEnabled:$true -PasswordProfile @{ Password = \u0026#34;SecurePass123!\u0026#34; } 48 brain svgrepo com\rSyntax Side-by-Side\rHere’s a practical scenario:\nUse Microsoft.Graph to create a user and assign them a role in Entra ID. Then use Az to grant that user access to a resource group with New-AzRoleAssignment. It\u0026rsquo;s not either/or—it’s knowing when each tool is appropriate.\n800 lightbulb solid svgrepo com\rSyntax Side-by-Side\rIf you’re dealing with subscriptions, infra, RBAC, use Az. If you’re touching users, groups, licenses, roles, use Microsoft.Graph. Want automation across both? Combine them in the same script—just authenticate each separately. 64 logphile paperclip\rReferences\rMicrosoft.Graph PowerShell Docs Az PowerShell Module Docs Compare Az and AzureRM After several years as a stay-at-home dad, I\u0026rsquo;m working my way back into the tech field—brushing up on tools, learning what’s changed, and sharing the journey along the way. This blog is part learning tool, part signal to employers, and part proof of work. Thanks for reading!\r","date":"March 22, 2025","externalUrl":null,"permalink":"/blog/az-graph-powershell/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"Azure has two major PowerShell modules: Az and Microsoft.Graph. Learn when to use each, why it matters, and how they overlap.","title":"Az vs Graph: What PowerShell Module to Use (and When)","type":"blog"},{"content":"","date":"March 22, 2025","externalUrl":null,"permalink":"/tags/azure/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Azure","type":"tags"},{"content":"","date":"March 22, 2025","externalUrl":null,"permalink":"/categories/powershell/","section":"Categories","summary":"","title":"PowerShell","type":"categories"},{"content":" One-off user creation is fine—until you need scale, consistency, and future-proofing. That’s where Microsoft Graph comes in. In this post, I’ll walk you through how to create Microsoft Entra ID users using PowerShell and Microsoft Graph—with clean, scalable scripting.\n64 logphile hourglass\rA (Very) Brief History of Microsoft Graph\rIntroduced in 2015, Microsoft Graph unified dozens of fragmented Microsoft APIs—Azure AD, Exchange, SharePoint, Teams—into a single, modern endpoint. It\u0026rsquo;s now the backbone of identity and data access across Microsoft 365 and Azure services. Microsoft is phasing out older modules like AzureAD and MSOnline in favor of Graph, making it the go-to tool for cloud-native management and automation.\n48 brain svgrepo com\rSmarter Entra ID User Creation with PowerShell \u0026#43; Graph\rHere’s how to automate Entra ID user creation using PowerShell and Microsoft Graph—with smart defaults, error handling, and dynamic group assignment. Creating users through the Azure Portal works\u0026hellip; until it doesn’t. Once you’re dealing with onboarding, consistency, or dynamic environments, it’s time to automate.\n800 list clipboard svgrepo com\rPrerequisites\rBefore we start scripting, make sure you have:\nPowerShell 7+ Microsoft Graph PowerShell SDK Admin permissions to Microsoft Entra ID Install-Module Microsoft.Graph -Scope CurrentUser Authenticate:\nConnect-MgGraph -Scopes \u0026#34;User.ReadWrite.All\u0026#34;, \u0026#34;Group.ReadWrite.All\u0026#34;, \u0026#34;Directory.Read.All\u0026#34; You\u0026rsquo;ll get a consent prompt to grant permission the first time.\r512 edit\rDefine the User Creation Function\rHere’s a reusable PowerShell function that creates a user and adds them to a security group.\nfunction New-SmartUser { param( [Parameter(Mandatory)] [string]$DisplayName, [Parameter(Mandatory)] [string]$UserPrincipalName, [Parameter(Mandatory)] [string]$Password, [Parameter(Mandatory)] [string]$Department, [Parameter()] [string]$GroupName = \u0026#34;Default Users\u0026#34; ) # Create the user $user = New-MgUser -AccountEnabled:$true ` -DisplayName $DisplayName ` -MailNickname ($UserPrincipalName.Split(\u0026#34;@\u0026#34;)[0]) ` -PasswordProfile @{ ForceChangePasswordNextSignIn = $true; Password = $Password } ` -UserPrincipalName $UserPrincipalName ` -Department $Department ` -UsageLocation \u0026#34;US\u0026#34; Write-Host \u0026#34;User \u0026#39;$($user.DisplayName)\u0026#39; created successfully.\u0026#34; # Find or create the group $group = Get-MgGroup -Filter \u0026#34;displayName eq \u0026#39;$GroupName\u0026#39;\u0026#34; -ErrorAction SilentlyContinue if (-not $group) { $group = New-MgGroup -DisplayName $GroupName ` -MailEnabled:$false -MailNickname:$GroupName.Replace(\u0026#34; \u0026#34;, \u0026#34;\u0026#34;) ` -SecurityEnabled:$true -GroupTypes @() Write-Host \u0026#34;Group \u0026#39;$GroupName\u0026#39; created.\u0026#34; } # Add user to group New-MgGroupMember -GroupId $group.Id -DirectoryObjectId $user.Id Write-Host \u0026#34;User added to group \u0026#39;$GroupName\u0026#39;.\u0026#34; } 48 flask conical\rLet\u0026#39;s Create a User\rNew-SmartUser -DisplayName \u0026#34;Beast\u0026#34; ` -UserPrincipalName \u0026#34;hank.mccoy@logphile.com\u0026#34; ` -Password \u0026#34;l1n3arFus1on\u0026#34; ` -Department \u0026#34;R\u0026amp;D\u0026#34; ` -GroupName \u0026#34;Research \u0026amp; Development\u0026#34; 48 treasure chest\rThe Results\rC:\\Users\\logphile\u0026gt; New-SmartUser -DisplayName \u0026#34;Beast\u0026#34; ` \u0026gt;\u0026gt; -UserPrincipalName \u0026#34;hank.mccoy@logphile.com\u0026#34; ` \u0026gt;\u0026gt; -Password \u0026#34;P@ssword123!\u0026#34; ` \u0026gt;\u0026gt; -Department \u0026#34;R\u0026amp;D\u0026#34; ` \u0026gt;\u0026gt; -GroupName \u0026#34;Research \u0026amp; Development\u0026#34; User \u0026#39;Beast\u0026#39; created successfully. Group \u0026#39;Research \u0026amp; Development\u0026#39; created. User added to group \u0026#39;Research \u0026amp; Development\u0026#39;. 64 badge svgrepo com 1\rVerify in the Portal\rLog into Entra ID \u0026gt; Users and confirm the user shows up with correct info.\nThen check Groups to confirm group creation and membership.\n64 chip component svgrepo com\rWhy This Matters\rManual user creation introduces:\nTypos in emails or departments Missed group assignments No audit trail Automated creation ensures: Consistency Scalability Auditability Plus, you’re scripting against Microsoft Graph—the modern way to manage Microsoft 365.\n64 emoji pirate svgrepo com\rWhat\u0026#39;s Next?\rMake password generation secure (use New-Guid, or integrate with a vault) Add license assignment via New-MgUserLicense Export logs or send Teams alerts on creation Bundle into a CI pipeline using GitHub Actions or Azure DevOps 48 flask conical\rWhy Use PowerShell \u0026#43; Graph Over the Portal?\rStill using the Azure Portal or legacy PowerShell modules like AzureAD or MSOnline? Reasons to change:\nTEST TEST TEST\nModern + Supported: Microsoft Graph is the future; older modules are deprecated.\rScriptable + Auditable: Build repeatable workflows and keep them in source control.\rRicher Control: Set attributes, assign groups, and handle edge cases the portal hides.\rCross-Tenant Ready: Run the same script across multiple environments without clicking around.\rLeast Privilege: Use fine-grained Graph scopes instead of over-privileged admin accounts.\rError Handling: Catch issues like duplicate UPNs or missing license capacity in real-time.\r512 cil balance scale\rComparison: Portal vs Legacy PowerShell vs Graph \u0026#43; PowerShell\rFeature Portal Old PowerShell (AzureAD) Graph + PowerShell Automation-ready ❌ ✅ ✅✅ Modern, supported ❌ ⚠️ Deprecated ✅✅ Full attribute support ❌ ❌ ✅✅ API-level consistency ❌ ❌ ✅✅ Fine-grained permissions ❌ ❌ ✅✅ Auditable/source-controllable ❌ ✅ ✅✅ Scalable across tenants ❌ ✅ ✅✅ 48 treasure chest\rBonus\rMicrosoft Graph PowerShell SDK Docs User Object Docs Graph Permissions Guide After several years as a stay-at-home dad, I\u0026rsquo;m working my way back into the tech field—brushing up on tools, learning what’s changed, and sharing the journey along the way. This blog is part learning tool, part signal to employers, and part proof of work. Thanks for reading!\r","date":"March 18, 2025","externalUrl":null,"permalink":"/blog/ditch-the-portal-create-entra-users-with-powershell-plus-graph/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"Ditch the portal and script like a pro—this post shows you how to create Entra ID users with PowerShell and Microsoft Graph for smarter, faster, mistake-free identity management.","title":"Ditch the Portal: Create Entra Users with PowerShell + Graph","type":"blog"},{"content":"","date":"March 18, 2025","externalUrl":null,"permalink":"/tags/entra/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"","title":"Entra","type":"tags"},{"content":"Privacy Notice\r1. Introduction #\rWelcome to [logPhile] (\u0026ldquo;we,\u0026rdquo; \u0026ldquo;our,\u0026rdquo; or \u0026ldquo;us\u0026rdquo;). Your privacy is important to us. This Privacy Notice explains how we collect, use, disclose, and protect your personal information when you use our website, [logphile.com].\nBy continuing to use our site, you consent to the terms of this Privacy Notice.\n2. Information We Collect #\rWe collect different types of information to enhance your experience, including:\nPersonal Information (such as name, email address) when voluntarily provided by you. Usage Data (such as IP address, browser type, and pages visited) collected through cookies and analytics tools. Cookies and Tracking Technologies to improve site functionality and user experience. For more details on cookies, see Our Cookie Policy.\n3. How We Use Your Information #\rWe use the collected information for purposes including:\nProviding and improving our website. Enhancing user experience and personalization. Analyzing site traffic and engagement. Ensuring compliance with legal obligations. 4. How We Share Your Information #\rWe do not sell your personal data. However, we may share your data with:\nService Providers (e.g., hosting and analytics providers). Legal Authorities when required to comply with laws or protect rights. Third-Party Tools (e.g., Google Analytics) for website insights. 5. Your Rights \u0026amp; Choices #\rDepending on your location, you may have the right to:\nAccess, correct, or delete your data. Opt out of certain data processing. Request data portability. Withdraw consent for cookies or marketing communications. To make a request, please contact us.\n6. Data Retention \u0026amp; Security #\rWe retain your data only as long as necessary and implement safeguards to protect it from unauthorized access.\n7. Changes to This Notice #\rWe may update this Privacy Notice. Any changes will be posted with an updated “Last Updated” date.\n8. Contact Us #\rFor questions about this Privacy Notice, contact:\n📩 Email: phil@logphile.com 🌍 Website: logphile.com\r","externalUrl":null,"permalink":"/privacy/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"\u003ch1 class=\"mt-2 mb-2 text-4xl font-extrabold text-neutral-900 dark:text-neutral\"\u003ePrivacy Notice\u003c/h1\u003e\r\n\u003chr class=\"mt-3 mb-6 border-neutral-700 dark:border-neutral-600 thicc\"\u003e\r\n\r\n\r\n\u003ch2 class=\"relative group\"\u003e1. Introduction \r\n    \u003cdiv id=\"1-introduction\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\r\n            style=\"text-decoration-line: none !important;\" href=\"#1-introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eWelcome to \u003cstrong\u003e[logPhile]\u003c/strong\u003e (\u0026ldquo;we,\u0026rdquo; \u0026ldquo;our,\u0026rdquo; or \u0026ldquo;us\u0026rdquo;). Your privacy is important to us. This Privacy Notice explains how we collect, use, disclose, and protect your personal information when you use our website, [logphile.com].\u003c/p\u003e","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"Hey, I’m Phil. This is my blog.\nIn 1991, I fell in love. A computer was brought home. The first AOL CD was cool, the next 132 were not. Soon, I discovered what was underneath, the real net. Looking through the phone book, I found Paradigm BBS. The screen became black and white again. I had a proper email address. I discovered MUDs, explored BBSes, and most importantly, learned through a dial-up connection. PC parts became my one and only ask. While my friends were saving up for SNES games, I saved lawn-mowing money for a 28.8k modem. It was great.\nI’ve spent two decades as a sysadmin, here in Virginia and Los Angeles, of those “jack of all trades” types. I’ve worked across stacks, made broken things work again, and kept things running quietly behind the scenes. Then I hit pause to focus on something even more important\u0026ndash;my daughter. She came with her own version of uptime monitoring, triage, and soft skills.\nNow that she’s older, I’m eager to implement and fix things again—-with fresh perspective, sharpened skills, and the same curiosity that got me into tech in the first place.\n","externalUrl":null,"permalink":"/about/","section":"logPhile@blog:~$ | The Logs Know What Broke First","summary":"\u003cp\u003e\u003cstrong\u003eHey, I’m Phil. This is my blog.\u003c/strong\u003e\u003c/p\u003e","title":"logPhile@blog:~$ | The Logs Know What Broke First","type":"about"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]